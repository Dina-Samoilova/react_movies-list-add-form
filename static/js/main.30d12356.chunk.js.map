{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","state","isValidTitle","isValidDescription","isValidImgUrl","isValidImdbUrl","isValidImdbId","resetForm","setState","setInputs","event","target","name","value","prevState","validationUrl","test","validationText","handleBlur","handleSubmit","preventDefault","newMovie","props","onAdd","onChanges","validator","buttonDisable","this","onSubmit","type","classNames","required","onChange","onBlur","disabled","Component","App","moviesFromServer","addMovie","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30d12356.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport './NewMovie.scss';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\ntype State = {\n  title: string,\n  description: string,\n  imgUrl: string,\n  imdbUrl: string,\n  imdbId: string,\n  isValidTitle: boolean,\n  isValidDescription: boolean,\n  isValidImgUrl: boolean,\n  isValidImdbUrl: boolean,\n  isValidImdbId: boolean,\n};\n\nexport class NewMovie extends Component<Props, State> {\n  state: State = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    isValidTitle: true,\n    isValidDescription: true,\n    isValidImgUrl: true,\n    isValidImdbUrl: true,\n    isValidImdbId: true,\n  };\n\n  resetForm = () => {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      isValidTitle: true,\n      isValidDescription: true,\n      isValidImgUrl: true,\n      isValidImdbUrl: true,\n      isValidImdbId: true,\n    });\n  };\n\n  setInputs = (event: React.ChangeEvent<HTMLInputElement\n  | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        [name]: value,\n      };\n    });\n  };\n\n  validationUrl = (value: string) => {\n    // eslint-disable-next-line max-len\n    const validUrl = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    return !validUrl.test(value);\n  };\n\n  validationText = (value: string) => {\n    const validText = /([^a-zA-Z0-9 .,'!?:;-])/;\n\n    return !validText.test(value);\n  };\n\n  handleBlur = (event: React.ChangeEvent<HTMLInputElement\n  | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'title':\n        this.setState(prevState => {\n          return {\n            ...prevState,\n            isValidTitle: this.validationText(value),\n          };\n        });\n        break;\n\n      case 'description':\n        this.setState(prevState => {\n          return {\n            ...prevState,\n            isValidDescription: this.validationText(value),\n          };\n        });\n        break;\n\n      case 'imgUrl':\n        this.setState(prevState => {\n          return {\n            ...prevState,\n            isValidImgUrl: this.validationUrl(value),\n          };\n        });\n        break;\n\n      case 'imdbUrl':\n        this.setState(prevState => {\n          return {\n            ...prevState,\n            isValidImdbUrl: this.validationUrl(value),\n          };\n        });\n        break;\n\n      case 'imdbId':\n        this.setState(prevState => {\n          return {\n            ...prevState,\n            isValidImdbId: this.validationText(value),\n          };\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newMovie = {\n      title: this.state.title,\n      description: this.state.description,\n      imgUrl: this.state.imgUrl,\n      imdbUrl: this.state.imdbUrl,\n      imdbId: this.state.imdbId,\n    };\n\n    this.props.onAdd(newMovie);\n\n    this.resetForm();\n  };\n\n  onChanges = (event: React.ChangeEvent<HTMLInputElement\n  | HTMLTextAreaElement>, validator: string) => {\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        [validator]: true,\n      };\n    });\n    this.setInputs(event);\n  };\n\n  buttonDisable = () => {\n    const {\n      isValidDescription,\n      isValidImdbId,\n      isValidImdbUrl,\n      isValidImgUrl,\n      isValidTitle,\n    } = this.state;\n\n    return (!isValidTitle || !isValidDescription || !isValidImgUrl\n      || !isValidImdbUrl || !isValidImdbId);\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      isValidTitle,\n      isValidDescription,\n      isValidImgUrl,\n      isValidImdbUrl,\n      isValidImdbId,\n    } = this.state;\n\n    return (\n      <>\n        <h2 className=\"title\">\n          ADD NEW MOVIE\n        </h2>\n\n        <form\n          onSubmit={this.handleSubmit}\n        >\n          <label className=\"form__label\">\n            Add TITLE\n\n            <input\n              type=\"text\"\n              name=\"title\"\n              value={title}\n              className={classNames('form-input',\n                { 'form-input--error': !isValidTitle })}\n              required\n              onChange={(event) => this.onChanges(event, 'isValidTitle')}\n              onBlur={this.handleBlur}\n            />\n            {!isValidTitle && (\n              <p className=\"error-message\">\n                Please enter valid title\n              </p>\n            )}\n          </label>\n\n          <label className=\"form__label\">\n            Add DESCRIPTION\n\n            <textarea\n              name=\"description\"\n              className={classNames('description',\n                { 'description--error': !isValidDescription })}\n              value={description}\n              onChange={(event) => this.onChanges(event, 'isValidDescription')}\n              onBlur={this.handleBlur}\n            />\n            {!isValidDescription && (\n              <p className=\"error-message\">\n                Please enter valid description\n              </p>\n            )}\n          </label>\n\n          <label className=\"form__label\">\n            Add IMAGE URL\n\n            <input\n              type=\"text\"\n              name=\"imgUrl\"\n              value={imgUrl}\n              className={classNames('form-input',\n                { 'form-input--error': !isValidImgUrl })}\n              required\n              onChange={(event) => this.onChanges(event, 'isValidImgUrl')}\n              onBlur={this.handleBlur}\n            />\n            {!isValidImgUrl && (\n              <p className=\"error-message\">\n                Please enter valid image URL\n              </p>\n            )}\n          </label>\n\n          <label className=\"form__label\">\n            Add IMDB URL\n\n            <input\n              type=\"text\"\n              name=\"imdbUrl\"\n              value={imdbUrl}\n              className={classNames('form-input',\n                { 'form-input--error': !isValidImdbUrl })}\n              required\n              onChange={(event) => this.onChanges(event, 'isValidImdbUrl')}\n              onBlur={this.handleBlur}\n            />\n            {!isValidImdbUrl && (\n              <p className=\"error-message\">\n                Please enter valid IMDB URL\n              </p>\n            )}\n          </label>\n\n          <label className=\"form__label\">\n            Add IMDB ID\n\n            <input\n              type=\"text\"\n              name=\"imdbId\"\n              value={imdbId}\n              className={classNames('form-input',\n                { 'form-input--error': !isValidImdbId })}\n              required\n              onChange={(event) => this.onChanges(event, 'isValidImdbId')}\n              onBlur={this.handleBlur}\n            />\n            {!isValidImdbId && (\n              <p className=\"error-message\">\n                Please enter valid IMDB ID\n              </p>\n            )}\n          </label>\n\n          <button\n            type=\"submit\"\n            className=\"submit-button\"\n            disabled={this.buttonDisable()}\n          >\n            ADD NEW MOVIE\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    if (movie) {\n      this.setState((prevState) => ({\n        movies: [...prevState.movies, movie],\n      }));\n    }\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}